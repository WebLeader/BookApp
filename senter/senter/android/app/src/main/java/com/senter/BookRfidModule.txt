package com.senter;

import android.widget.Toast;
import android.content.Context;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import android.app.Application;
import android.util.Log;

import com.senter.support.openapi.StUhf;

import com.senter.demo.uhf.util.DataTransfer;

import java.util.ArrayList;
import java.util.List;

public class BookRfidModule extends ReactContextBaseJavaModule {
    //private Context mContext;
    public static final String TAG="MainApp";
    private StUhf.UII suii;
    private boolean	goOnInventoring	= true;
    private boolean	isInventoring	= false;


    public BookRfidModule(ReactApplicationContext reactContext) {
        super(reactContext);
        //mContext = reactContext;
    }

    @Override
    public String getName() {
        //返回的这个名字是必须的，在rn代码中需要这个名字来
        // 调用该类的方法。
        return "BookRfidModule";
    }

    @ReactMethod
    public void getUii(Callback success, Callback failure) {
        try {
            final List list =  new ArrayList();

            goOnInventoring = true;
            isInventoring=true;
            StUhf stUhf = StUhf.getUhfInstance(StUhf.InterrogatorModel.InterrogatorModelD2);
            boolean isSuccess = stUhf.init();
            Log.d("isSuccess", "isSuccess = : " + isSuccess);
            if (isSuccess==false) {
//                初始化失败
                return;
            }

//            操作类
            StUhf.InterrogatorModelDs.InterrogatorModelD2 interrogatorModelD2 = stUhf.getInterrogatorAs(StUhf.InterrogatorModelDs.InterrogatorModelD2.class);
//          操作rfid,使用interrogatorModelD2
            interrogatorModelD2.iso18k6cRealTimeInventory(1, new StUhf.InterrogatorModelDs.UmdOnIso18k6cRealTimeInventory(){

                @Override
                public void onFinishedWithError(StUhf.InterrogatorModelDs.UmdErrorCode error)
                {
                    onFinishedOnce();
                }

                @Override
                public void onFinishedSuccessfully(	Integer antennaId, int readRate, int totalRead)
                {
                    onFinishedOnce();
                }

                private void onFinishedOnce()
                {
//                    if (goOnInventoring)
//                    {
//                        startInventory();
//                    } else
//                    {
//                        isInventoring=false;
//
//                    }
                }
                @Override
                public void onTagInventory(StUhf.UII uii, StUhf.InterrogatorModelDs.UmdFrequencyPoint frequencyPoint, Integer antennaId, StUhf.InterrogatorModelDs.UmdRssi rssi)
                {


                    byte[] Uii = uii.getBytes();
                    StringBuilder buf = new StringBuilder(Uii.length * 2);
                    for(byte b : Uii) { // 使用String的format方法进行转换
                        buf.append(String.format("%02x", new Integer(b & 0xff)));
                        list.add(buf.toString());
                    }
                    Log.d("buf", "buf = : " + buf.toString());
                    //Log.d("list:",list.toString());
                    //return buf.toString();
                   // suii = buf.toString();
                }

            });
            byte[] Uii = interrogatorModelD2.iso18k6cGetAccessEpcMatch().getEpc().getBytes();
            success.invoke(DataTransfer.xGetString(Uii));
        } catch (Exception e) {
            e.printStackTrace();
            failure.invoke(e.getMessage());
        }
    }

//    参考案例，数组转16进制字符串
    public static String bytesToHexFun3(byte[] bytes) {
        StringBuilder buf = new StringBuilder(bytes.length * 2);
        for(byte b : bytes) { // 使用String的format方法进行转换
            buf.append(String.format("%02x", new Integer(b & 0xff)));
        }

        return buf.toString();
    }


    //函数不能有返回值，因为被调用的原生代码是异步的，原生代码执行结束之后只能通过回调函数或者发送信息给rn那边。
//    @ReactMethod
//    public void rnCallNative(String msg){
//        Toast.makeText(mContext,msg,Toast.LENGTH_SHORT).show();
//    }


}